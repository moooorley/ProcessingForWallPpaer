{\rtf1\ansi\ansicpg932\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 int num = 600;\
Point[] points = new Point[num];\
\
void setup() \{\
  size(1280, 720, P3D);\
  pixelDensity(displayDensity());\
  \
  for (int i = 0; i < num; i++) \{\
    points[i] = new Point();\
  \}\
\}\
\
void draw() \{\
  background(0);\
  translate(width / 2, height / 2, 0);\
  rotateY(frameCount * 0.01);\
  \
  for (int i = 0; i < num; i++) \{\
    points[i].update();\
    points[i].display();\
  \}\
  \
  for (int i = 0; i < num; i++) \{\
    float tri = points[i].getTargetRadius();\
    for (int j = 0; j < num; j++) \{\
      float trj = points[j].getTargetRadius();\
      if (tri != trj) continue;\
      float d = dist(\
        points[i].x,\
        points[i].y,\
        points[i].z,\
        points[j].x,\
        points[j].y,\
        points[j].z\
      );\
      int threshold = 100;\
      if (d < threshold) \{\
        int strength = (int) map(d, 0, threshold, 255, 0);\
        stroke(strength);\
        strokeWeight(1);\
        line(\
          points[i].x,\
          points[i].y,\
          points[i].z,\
          points[j].x,\
          points[j].y,\
          points[j].z\
        );\
      \}\
    \}\
  \}\
\}\
\
class Point \{\
  float x;\
  float y;\
  float z;\
  float targetX;\
  float targetY;\
  float targetZ;\
  float targetR;\
  \
  Point() \{\
    setTarget();\
    x = targetX;\
    y = targetY;\
    z = targetZ;\
  \}\
  \
  float getTargetRadius() \{\
    return targetR;\
  \}\
  \
  void setTarget() \{\
    float rnd = random(3);\
    if (rnd < 1) \{\
      targetR = 300;\
    \} else if (rnd < 2) \{\
      targetR = 225;\
    \} else \{\
      targetR = 150;\
    \}\
    float phi = random(TWO_PI);\
    float unitZ = random(-1, 1);\
    targetX = targetR * sqrt(1 - unitZ * unitZ) * cos(phi);\
    targetY = targetR * sqrt(1 - unitZ * unitZ) * sin(phi);\
    targetZ = targetR * unitZ;\
  \}\
  \
  void update() \{\
    if (frameCount % 120 == 0) \{\
      setTarget();\
    \}\
    x += (targetX - x) * 0.05;\
    y += (targetY - y) * 0.05;\
    z += (targetZ - z) * 0.05;\
  \}\
  \
  void display() \{\
    stroke(0);\
    strokeWeight(4);\
    point(x, y, z);\
  \}\
\}}